@page "/watchList"
@using ToWatchList.Data
@using ToWatchList.Data.Model
@using ToWatchList.Interfaces
@using Newtonsoft.Json
@inject IDatabaseStorage DatabaseStorage

<PageTitle>Watch List</PageTitle>

<h1>Watch List</h1>

<div class="row row-cols-1 row-cols-md-1 row-cols-lg-2 g-4">
    @foreach (var item in MediaItems)
    {
        @*  ShowDelete=true; indicate the button icon should be for deleting
            MediaItem="@item"; provide the item for the media card
            ItemButtonAction; provide the delegate method when button being clicked *@
        <MediaCard ShowDelete=true MediaItem="@item" ItemButtonAction="RemoveItemFromList"></MediaCard>
    }
</div>

@code {
    private readonly List<MediaItem> MediaItems;

    public WatchList()
    {
        MediaItems = new List<MediaItem>();
    }

    protected override Task OnInitializedAsync()
    {
        return GetMediaItemsAsync();
    }

    /// <summary>
    /// Prepare the MediaItems model for displaying
    /// </summary>
    /// <returns></returns>
    private async Task GetMediaItemsAsync()
    {
        MediaItems.Clear();
        // Dependency injected from Program.cs
        var list = await DatabaseStorage.GetListAsync();
        foreach (var jsonString in list)
        {
            MediaItems.Add(JsonConvert.DeserializeObject<MediaItem>(jsonString));
        }
    }


    public async Task RemoveItemFromList(MediaItem media)
    {
        string mediaJson = JsonConvert.SerializeObject(media);
        // Dependency injected from Program.cs
        await DatabaseStorage.RemoveFromListAsync(mediaJson);
        await GetMediaItemsAsync();
        // trigger MediaItems reload
        StateHasChanged();
    }
}