@using ToWatchList.Data;
@using ToWatchList.Data.Model
@* hide if null or empty, those media are generally not a tv or a movie.*@
<div hidden="@string.IsNullOrEmpty(MediaItem.FirstAirDate)" class="col">
    <div class="card mb-3">
        <div class="row g-0">
            <div class="col-md-4">
                <img src="@MediaItem.PosterPathFull" class="img-fluid rounded-start">
            </div>
            <div class="col-md-8">
                <div class="float-end p-2">
                    <button type="button" class="btn btn-dark" @onclick="InvokeItemButtonAction" disabled="@IsDisabled">
                        @* show adding/removing icon based on the parameter*@
                        <span class="oi @(ShowDelete? "oi-minus":"oi-plus") " aria-hidden="true"></span>
                    </button>
                </div>
                <div class="card-body">
                    <h5 class="card-title">@MediaItem.Name</h5>
                    <p class="card-text">@MediaItem.TruncatedOverview</p>
                    <p hidden="@string.IsNullOrEmpty(MediaItem.FirstAirDate)" class="card-text"><small class="text-body-secondary">First Air Date: @MediaItem.FirstAirDate</small></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public MediaItem? MediaItem { get; set; }
    /// <summary>
    /// Func<> Passed by Parameter, invoke method provided from parent component: adding/removing the item.
    /// </summary>
    [Parameter]
    public Func<MediaItem, Task>? ItemButtonAction { get; set; }
    [Parameter]
    public bool ShowDelete { get; set; }
    [Parameter]
    public bool IsDisabled { get; set; }

    private void InvokeItemButtonAction()
    {
        ItemButtonAction?.Invoke(MediaItem);
        IsDisabled = !ShowDelete;
    }
}